 test("XML Document Selectors",  new Function() {
            public void goFunction() {

                Object xml = createWithFriesXML();
                expect(11);

                equal(Sizzle("foo_bar", xml).size(), 1, "Element Selector with underscore");
                equal(Sizzle(".component", xml).size(), 1, "Class selector");
                equal(Sizzle("[class*=component]", xml).size(), 1, "Attribute selector for class");
                equal(Sizzle("property[name=prop2]", xml).size(), 1, "Attribute selector with name");
                equal(Sizzle("[name=prop2]", xml).size(), 1, "Attribute selector with name");
                equal(Sizzle("#seite1", xml).size(), 1, "Attribute selector with ID");
                equal(Sizzle("component#seite1", xml).size(), 1, "Attribute selector with ID");
                equal(Sizzle.matches("#seite1", Sizzle("component", xml)).size(), 1, "Attribute selector filter with ID");
                equal(Sizzle("meta property thing", xml).size(), 2, "Descendent selector and dir caching");
                ok(Sizzle.matchesSelector(xml.lastChild, "soap\\:Envelope"), "Check for namespaced element");

                xml = jQuery.parseXML("<?xml version='1.0' encoding='UTF-8'?><root><elem id='1'/></root>");
                equal(Sizzle("elem:not(:has(*))", xml).size(), 1, "Non-qSA path correctly handles numeric ids (jQuery #14142)");
            }
        });


        test("broken",  new Function() { public void goFunction() {
            expect(29);

            Object attrbad,
                    broken = function(name, selector) {
                throws( new Function() { public void goFunction() {
                    // Setting context to null here somehow avoids QUnit's window.error handling
                    // making the e & e.message correct
                    // For whatever reason, without this,
                    // Sizzle.error will be called but no error will be seen in oldIE
                    Sizzle.call(null, selector);
                },function(e) {
                    return e.message.indexOf("Syntax error") >= 0;
                },name + ": " + selector);
            } ;

            broken("Broken Selector", "[");
            broken("Broken Selector", "(");
            broken("Broken Selector", "{");
            broken("Broken Selector", "<");
            broken("Broken Selector", "()");
            broken("Broken Selector", "<>");
            broken("Broken Selector", "{}");
            broken("Broken Selector", ",");
            broken("Broken Selector", ",a");
            broken("Broken Selector", "a,");
            // Hangs on IE 9 if regular expression is inefficient
            broken("Broken Selector", "[id=012345678901234567890123456789");
            broken("Doesn't exist", ":visble");
            broken("Nth-child", ":nth-child");
            // Sigh again. IE 9 thinks this is also a real selector
            // not super critical that we fix this case
            //broken( "Nth-child", ":nth-child(-)" );
            // Sigh. WebKit thinks this is a real selector in qSA
            // They've already fixed this and it'll be coming into
            // current browsers soon. Currently, Safari 5.0 still has this problem
            // broken( "Nth-child", ":nth-child(asdf)", [] );
            broken("Nth-child", ":nth-child(2n+-0)");
            broken("Nth-child", ":nth-child(2+0)");
            broken("Nth-child", ":nth-child(- 1n)");
            broken("Nth-child", ":nth-child(-1 n)");
            broken("First-child", ":first-child(n)");
            broken("Last-child", ":last-child(n)");
            broken("Only-child", ":only-child(n)");
            broken("Nth-last-last-child", ":nth-last-last-child(1)");
            broken("First-last-child", ":first-last-child");
            broken("Last-last-child", ":last-last-child");
            broken("Only-last-child", ":only-last-child");

            // Make sure attribute value quoting works correctly. See: #6093
            attrbad = jQuery("<input type='hidden' value='2' name='foo.baz' id='attrbad1'/><input type='hidden' value='2' name='foo[baz]' id='attrbad2'/>").appendTo("#qunit-fixture");

            broken("No attribute value", "input[name=]");
            broken("Attribute not escaped", "input[name=foo.baz]");
            broken("Attribute not escaped", "input[name=foo[baz]]");
            broken("Attribute quote mismatch", "input[name=''double-quoted'']");
            broken("Attribute quote mismatch", "input[name='apostrophe'd']");
        }
        });













        test("pseudo - misc",  new Function() { public void goFunction() {
            expect(40);

            Object select, tmp, input;

            jQuery("<h1 id='h1'/><h2 id='h2'/><h2 id='h2-2'/>").prependTo("#qunit-fixture");
            t("Headers", "#qunit-fixture :header", new String[] {"h1", "h2", "h2-2"});
            t("Headers(case-insensitive)", "#qunit-fixture :Header", new String[] {"h1", "h2", "h2-2"});
            t("Multiple matches with the same context (cache check)", "#form select:has(option:first-child:contains('o'))", new String[] {"select1", "select2", "select3", "select4"})
            ;

            ok(Sizzle("#qunit-fixture :not(:has(:has(*)))").size(), "All not grandparents");

            select = driver.findElement(By.id("select1"));
            ok(Sizzle.matchesSelector(select, ":has(option)"), "Has Option Matches");

            ok(Sizzle("a:contains('')").size(), "Empty string contains");
            t("Text Contains", "a:contains(Google)", new String[] {"google", "groups"});
            t("Text Contains", "a:contains(Google Groups)", new String[] {"groups"});

            t("Text Contains", "a:contains('Google Groups (Link)')", new String[] {"groups"});
            t("Text Contains", "a:contains(\"(Link)\")", new String[] {"groups"});
            t("Text Contains", "a:contains(Google Groups (Link))", new String[] {"groups"});
            t("Text Contains", "a:contains((Link))", new String[] {"groups"});

            t("Contains with CSS escapes", "span:contains(\"\\\"'\\53F0 \\5317 Ta\\301 ibe\\30C i\")",
                    new String[] {"utf8class1"});

            tmp = document.createElement("div");
            tmp.id = "tmp_input";
            document.body.appendChild(tmp);

            jQuery.each(new String[] {"button", "submit", "reset"},function(i, type) {
                Object els = jQuery(
                        "<input id='input_%' type='%'/><button id='button_%' type='%'>test</button>"
                                .replace( / %/g, type)
                ).appendTo(tmp);

                t("Input Buttons :" + type, "#tmp_input :" + type,["input_" + type, "button_" + type]);

                ok(Sizzle.matchesSelector(els[0], ":" + type), "Input Matches :" + type);
                ok(Sizzle.matchesSelector(els[1], ":" + type), "Button Matches :" + type);
            });

            document.body.removeChild(tmp);

            // Recreate tmp
            tmp = document.createElement("div");
            tmp.id = "tmp_input";
            tmp.innerHTML = "<span>Hello I am focusable.</span>";
            // Setting tabIndex should make the element focusable
            // http://dev.w3.org/html5/spec/single-page.html#focus-management
            document.body.appendChild(tmp);
            tmp.tabIndex = 0;
            tmp.focus();
            if (document.activeElement != = tmp || (document.hasFocus && !document.hasFocus()) ||
                    (document.querySelectorAll && !document.querySelectorAll("div:focus").length)) {
                ok(true, "The div was not focused. Skip checking the :focus match.");
                ok(true, "The div was not focused. Skip checking the :focus match.");
            } else {
                t("tabIndex element focused", ":focus", new String[] {"tmp_input"});
                ok(Sizzle.matchesSelector(tmp, ":focus"), ":focus matches tabIndex div");
            }

            // Blur tmp
            tmp.blur();
            document.body.focus();
            ok(!Sizzle.matchesSelector(tmp, ":focus"), ":focus doesn't match tabIndex div");
            document.body.removeChild(tmp);

            // Input focus/active
            input = document.createElement("input");
            input.type = "text";
            input.id = "focus-input";

            document.body.appendChild(input);
            input.focus();

            // Inputs can't be focused unless the document has focus
            if (document.activeElement != = input || (document.hasFocus && !document.hasFocus()) ||
                    (document.querySelectorAll && !document.querySelectorAll("input:focus").length)) {
                ok(true, "The input was not focused. Skip checking the :focus match.");
                ok(true, "The input was not focused. Skip checking the :focus match.");
            } else {
                t("Element focused", "input:focus", new String[] {"focus-input"});
                ok(Sizzle.matchesSelector(input, ":focus"), ":focus matches");
            }

            input.blur();

            // When IE is out of focus, blur does not work. Force it here.
            if (document.activeElement == = input) {
                document.body.focus();
            }

            ok(!Sizzle.matchesSelector(input, ":focus"), ":focus doesn't match");
            document.body.removeChild(input);


            deepEqual(
                    Sizzle("[id='select1'] *:not(:last-child), [id='select2'] *:not(:last-child)", q("qunit-fixture")[0]),
                    q("option1a", "option1b", "option1c", "option2a", "option2b", "option2c"),
                    "caching system tolerates recursive selection"
            );

            // Tokenization edge cases
            t("Sequential pseudos", "#qunit-fixture p:has(:contains(mark)):has(code)", new String[] {"ap"});
            t("Sequential pseudos", "#qunit-fixture p:has(:contains(mark)):has(code):contains(This link)", new String[] {"ap"});

            t("Pseudo argument containing ')'", "p:has(>a.GROUPS[src!=')'])", new String[] {"ap"});
            t("Pseudo argument containing ')'", "p:has(>a.GROUPS[src!=')'])", new String[] {"ap"});
            t("Pseudo followed by token containing ')'", "p:contains(id=\"foo\")[id!=\\)]", new String[] {"sndp"});
            t("Pseudo followed by token containing ')'", "p:contains(id=\"foo\")[id!=')']", new String[] {"sndp"});

            t("Multi-pseudo", "#ap:has(*), #ap:has(*)", new String[] {"ap"});
            t("Multi-positional", "#ap:gt(0), #ap:lt(1)", new String[] {"ap"});
            t("Multi-pseudo with leading nonexistent id", "#nonexistent:has(*), #ap:has(*)", new String[] {"ap"});
            t("Multi-positional with leading nonexistent id", "#nonexistent:gt(0), #ap:lt(1)", new String[] {"ap"});

            t("Tokenization stressor", "a[class*=blog]:not(:has(*, :contains(!)), :contains(!)), br:contains(]), p:contains(]), :not(:empty):not(:parent)", new String[] {"ap", "mark", "yahoo", "simon"})
            ;
        });





        test("pseudo - :lang",  new Function() { public void goFunction() {
            expect(105);

            Object docElem = document.documentElement,
                    docXmlLang = docElem.getAttribute("xml:lang"),
                    docLang = docElem.lang,
                    foo = driver.findElement(By.id("foo")),
                    anchor = driver.findElement(By.id("anchor2")),
                    xml = createWithFriesXML(),
                    testLang = function(text, elem, container, lang, extra) {
                Object message,
                        full = lang + "-" + extra;

                message = "lang=" + lang + " " + text;
                container.setAttribute(container.ownerDocument.documentElement.nodeName == = "HTML" ? "lang" : "xml:lang", lang);
                assertMatch(message, elem, ":lang(" + lang + ")");
                assertMatch(message, elem, ":lang(" + mixCase(lang) + ")");
                assertNoMatch(message, elem, ":lang(" + full + ")");
                assertNoMatch(message, elem, ":lang(" + mixCase(full) + ")");
                assertNoMatch(message, elem, ":lang(" + lang + "-)");
                assertNoMatch(message, elem, ":lang(" + full + "-)");
                assertNoMatch(message, elem, ":lang(" + lang + "glish)");
                assertNoMatch(message, elem, ":lang(" + full + "glish)");

                message = "lang=" + full + " " + text;
                container.setAttribute(container.ownerDocument.documentElement.nodeName == = "HTML" ? "lang" : "xml:lang", full);
                assertMatch(message, elem, ":lang(" + lang + ")");
                assertMatch(message, elem, ":lang(" + mixCase(lang) + ")");
                assertMatch(message, elem, ":lang(" + full + ")");
                assertMatch(message, elem, ":lang(" + mixCase(full) + ")");
                assertNoMatch(message, elem, ":lang(" + lang + "-)");
                assertNoMatch(message, elem, ":lang(" + full + "-)");
                assertNoMatch(message, elem, ":lang(" + lang + "glish)");
                assertNoMatch(message, elem, ":lang(" + full + "glish)");
            },
            mixCase = function(str) {
                Object ret = str.split(""),
                        i = ret.length;
                while (i--) {
                    if (i & 1) {
                        ret[i] = ret[i].toUpperCase();
                    }
                }
                return ret.join("");
            },
            assertMatch = function(text, elem, selector) {
                ok(Sizzle.matchesSelector(elem, selector), text + " match " + selector);
            },
            assertNoMatch = function(text, elem, selector) {
                ok(!Sizzle.matchesSelector(elem, selector), text + " fail " + selector);
            }
            ;

            // Prefixing and inheritance
            ok(Sizzle.matchesSelector(docElem, ":lang(" + docElem.lang + ")"), "starting :lang");
            testLang("document", anchor, docElem, "en", "us");
            testLang("grandparent", anchor, anchor.parentNode.parentNode, "yue", "hk");
            ok(!Sizzle.matchesSelector(anchor, ":lang(en), :lang(en-us)"),
                    ":lang does not look above an ancestor with specified lang");
            testLang("self", anchor, anchor, "es", "419");
            ok(!Sizzle.matchesSelector(anchor, ":lang(en), :lang(en-us), :lang(yue), :lang(yue-hk)"),
                    ":lang does not look above self with specified lang");

            // Searching by language tag
            anchor.parentNode.parentNode.lang = "arab";
            anchor.parentNode.lang = anchor.parentNode.id = "ara-sa";
            anchor.lang = "ara";
            deepEqual(Sizzle(":lang(ara)", foo),[anchor.parentNode, anchor],"Find by :lang");

            // Selector validity
            anchor.parentNode.lang = "ara";
            anchor.lang = "ara\\b";
            deepEqual(Sizzle(":lang(ara\\b)", foo),[],":lang respects backslashes");
            deepEqual(Sizzle(":lang(ara\\\\b)", foo),[anchor], ":lang respects escaped backslashes");
            throws( new Function() { public void goFunction() {
                Sizzle.call(null, "dl:lang(c++)");
            },function(e) {
                return e.message.indexOf("Syntax error") >= 0;
            },":lang value must be a valid identifier");

            // XML
            foo = jQuery("response", xml)[0];
            anchor = jQuery("#seite1", xml)[0];
            testLang("XML document", anchor, xml.documentElement, "en", "us");
            testLang("XML grandparent", anchor, foo, "yue", "hk");
            ok(!Sizzle.matchesSelector(anchor, ":lang(en), :lang(en-us)"),
                    "XML :lang does not look above an ancestor with specified lang");
            testLang("XML self", anchor, anchor, "es", "419");
            ok(!Sizzle.matchesSelector(anchor, ":lang(en), :lang(en-us), :lang(yue), :lang(yue-hk)"),
                    "XML :lang does not look above self with specified lang");

            // Cleanup
            if (docXmlLang == null) {
                docElem.removeAttribute("xml:lang");
            } else {
                docElem.setAttribute("xml:lang", docXmlLang);
            }
            docElem.lang = docLang;
        }
    });




        test("context",  new Function() { public void goFunction() {
            expect(16);

            Object context,
                    selector = ".blog",
                    expected = q("mark", "simon"),
                    iframe = driver.findElement(By.id("iframe")),
                    iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

            deepEqual(Sizzle(selector, document), expected, "explicit document context");
            deepEqual(Sizzle(selector), expected, "unspecified context becomes document");
            deepEqual(Sizzle(selector, undefined), expected, "undefined context becomes document");
            deepEqual(Sizzle(selector, null), expected, "null context becomes document");

            iframeDoc.open();
            iframeDoc.write("<body><p id='foo'>bar</p></body>");
            iframeDoc.close();
            expected =[iframeDoc.getElementById("foo")];
            deepEqual(Sizzle("p", iframeDoc), expected, "Other document context (simple)");
            deepEqual(Sizzle("p:contains(ar)", iframeDoc), expected, "Other document context (complex)");
            deepEqual(Sizzle("span", iframeDoc),[],"Other document context (simple, no results)");
            deepEqual(Sizzle("* span", iframeDoc),[],"Other document context (complex, no results)");

            context = driver.findElement(By.id("nothiddendiv"));
            deepEqual(Sizzle("*", context), q("nothiddendivchild"), "<div> context");
            deepEqual(Sizzle("* > *", context),[],"<div> context (no results)");

            context = driver.findElement(By.id("lengthtest"));
            deepEqual(Sizzle("input", context), q("length", "idTest"), "<form> context");
            deepEqual(Sizzle("select", context),[],"<form> context (no results)");

            context = document.createDocumentFragment();
            // Capture *independent* expected nodes before they're detached from the page
            expected = q("siblingnext", "siblingspan");
            context.appendChild(driver.findElement(By.id("siblingTest")));
            deepEqual(
                    Sizzle("em:nth-child(2)", context),
                    expected.slice(0, 1),
                    "DocumentFragment context"
            );
            deepEqual(Sizzle("span", context), expected.slice(1), "DocumentFragment context by tag name");
            deepEqual(Sizzle("p", context),[],"DocumentFragment context (no results)");

            deepEqual(
                    Sizzle("em + :not(:has(*)):not(:empty), foo", context.firstChild),
                    expected.slice(0, 1),
                    "Non-qSA path correctly sets detached context for sibling selectors (jQuery #14351)"
            );
        }
    });




        test("caching",  new Function() { public void goFunction() {
            expect(2);
            Sizzle(":not(code)", driver.findElement(By.id("ap")));
            deepEqual(Sizzle(":not(code)", driver.findElement(By.id("foo"))), q("sndp", "en", "yahoo", "sap", "anchor2", "simon"), "Reusing selector with new context");

            t("Deep ancestry caching in post-positional element matcher (jQuery #14657)",
                    "#qunit-fixture a:lt(3):parent",
                    new String[] {"simon1", "google", "groups"});

        }});




        asyncTest("Iframe dispatch should not affect Sizzle, see jQuery #13936", 1,  new Function() { public void goFunction() {
            Object loaded = false,
                    thrown = false,
                    iframe = driver.findElement(By.id("iframe")),
                    iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

            jQuery(iframe).on("load",  new Function() { public void goFunction() {
                Object form;

                try {
                    iframeDoc = this.contentDocument || this.contentWindow.document;
                    form = Sizzle("#navigate", iframeDoc)[0];
                } catch (e) {
                    thrown = e;
                }

                if (loaded) {
                    strictEqual(thrown, false, "No error thrown from post-reload Sizzle call");
                    start();
                } else {
                    loaded = true;
                    form.submit();
                }

            }});

            iframeDoc.open();
            iframeDoc.write("<body><form id='navigate' action='?'></form></body>");
            iframeDoc.close();
        }
        });



        test("matchesSelector",  new Function() { public void goFunction() {
            expect(6);

            Object el = driver.findElement(By.id("simon1")),
                    disconnected = document.createElement("div");

            ok(Sizzle.matchesSelector(el, "[rel='bookmark']"), "quoted attribute");
            ok(Sizzle.matchesSelector(el, "[rel=bookmark]"), "unquoted attribute");
            ok(Sizzle.matchesSelector(el, "[\nrel = bookmark\t]"), "unquoted attribute with non-semantic whitespace");

            ok(Sizzle.matchesSelector(disconnected, "div"), "disconnected element");

            ok(Sizzle.matchesSelector(el, "* > *"), "child combinator (matching)");
            ok(!Sizzle.matchesSelector(disconnected, "* > *"), "child combinator (not matching)");
        }
        });



        test("select() with pre-compiled function",  new Function() { public void goFunction() {
            expect(6);

            jQuery.each(["#qunit-fixture #first", "ol#listWithTabIndex > li[tabindex]", "#liveSpan1"],
            function(i, selector) {
                Object compiled = Sizzle.compile(selector);
                equal(Sizzle.select(compiled, document).size(), 1, "Should match using a compiled selector function");
                equal(Sizzle.select(compiled, Sizzle("#first").get(0)).size(), 0, "Should not match with different context");
            });

        }});